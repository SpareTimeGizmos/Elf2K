/* speaker.pld - Spare Time Gizmos Elf 2000 GPIO card Speaker GAL	*/
/*									*/
/*   Copyright (C) 2006 by Robert Armstrong, Milpitas, California.	*/
/*									*/
/*  This program is free software; you can redistribute it and/or	*/
/* modify it under the terms of the GNU General Public License as	*/
/* published by the Free Software Foundation; either version 2 of the	*/
/* License, or (at your option) any later version.			*/
/*									*/
/*  This program is distributed in the hope that it will be useful, but	*/
/* WITHOUT ANY WARRANTY; without even the implied warranty of		*/
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU	*/
/* General Public License for more details.				*/
/*									*/
/*   You should have received a copy of the GNU General Public License	*/
/* along with this program; if not, write to the Free Software		*/
/* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 USA.	*/
/*									*/
NAME            SPEAKER;
PARTNO          SPEAKER;
REVISION        B;
DATE            05/08/06;
DESIGNER        Robert Armstrong;
COMPANY         Spare Time Gizmos;
ASSEMBLY        GPIO;
LOCATION        U6;
DEVICE          G16V8MS;


/* INPUTS...								*/
Pin  1 = CLK_CONTROL_H;	/* clock all internal flip-flops		*/
Pin  2 = Q;		/* 1802 Q output				*/
Pin [3..8] = D5..D0;	/* buffered 1802 bus data (six bits only!)	*/
Pin  9 = SP_OSC;	/* 7555 fixed frequency oscillator		*/
Pin 11 = RESET;		/* system reset (not RUN)			*/

/* OUTPUTS...								*/
Pin 19 = PPI_A0;	/* PPI address bit 0				*/
Pin 18 = PPI_A1;	/* PPI address bit 1				*/
FIELD PPI_A = [PPI_A0, PPI_A1];
/* Pin 17 = N/C */
Pin 16 = SP_DRIVE_1;	/* active high speaker output bit		*/
Pin 15 = SP_DRIVE_2;	/* complementary speaker output bit		*/
FIELD SP_DRIVE = [SP_DRIVE_1, SP_DRIVE_2];
/* Pin 14 = N/C */
Pin 13 = SP_MD_0;	/* speaker mode bit 0				*/
Pin 14 = SP_MD_1;	/*   "  "   "    "  1				*/
FIELD SP_MD = [SP_MD_0, SP_MD_1];


/*   The speaker mode and PPI address registers are a couple of "smart"	*/
/* latches - each one has a corresponding enable bit, and the register	*/
/* value changes ONLY if the enable bit is set.  This allows the soft-	*/
/* ware to change the speaker mode without affecting the PPI address 	*/
/* and vice-versa, which is critical for allowing the speaker to be	*/
/* used at interrupt level.  Otherwise there'd be no clean way for an	*/
/* ISR to change the speaker state without first knowing what PPI	*/
/* address was supposed to be selected.					*/
/*									*/
/*   Note that the clock for these latches is CLK_CONTROL_H, which is	*/
/* generated by the GPIO BUS GAL.  We'd also really, really, really 	*/
/* like to have these bits be reset by a RESET (so, for example, if the	*/
/* user resets the Elf 2000 while the speaker is on it won't stay on!)	*/
/* but the 16V8 GAL just doesn't have enough inputs...			*/
SP_MD.d = (D5 & [D3,D4]) # (!D5 & SP_MD);
PPI_A.d = (D2 & [D0,D1]) # (!D2 & PPI_A);


/*   This code drives the speaker outputs according to the current	*/
/* speaker mode bits, SP_MD.  Note that the two speaker outputs are	*/
/* complementary for push-pull operation EXCEPT when the speaker is 	*/
/* turned off, and then they're both zero.				*/
SP_DRIVE =  ['b'0,   'b'0   ] & SP_MD:'b'00	/* Mode 0 - OFF		*/
	  # [SP_OSC, !SP_OSC] & SP_MD:'b'01	/* Mode 1 - fixed tone	*/
          # [Q,      !Q     ] & SP_MD:'b'10	/* Mode 2 - follow Q	*/
          # ['b'1,   'b'0   ] & SP_MD:'b'11;	/* Mode 3 - ON		*/
